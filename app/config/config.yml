imports:
    - { resource: parameters.yml }
    - { resource: security.yml }
    - { resource: @AdminAdminBundle/Resources/config/admin.yml }

framework:
    #esi:             ~
    translator:     ~
    secret:          "%secret%"
    router:
        resource: "%kernel.root_dir%/config/routing.yml"
        strict_requirements: ~
    form:            ~
    csrf_protection: ~
    validation:      { enable_annotations: true }
    templating:
        engines: ['twig']
        #assets_version: SomeVersionScheme
    default_locale:  fr
    trusted_hosts:   ~
    trusted_proxies: ~
    session:
        # handler_id set to null will use default session handler from php.ini
        handler_id:  ~
    fragments:       ~
    http_method_override: true

# Twig Configuration
twig:
    debug:            "%kernel.debug%"
    strict_variables: "%kernel.debug%"

# Assetic Configuration
assetic:
    debug:          "%kernel.debug%"
    use_controller: false
    bundles:        [ ]
    #java: /usr/bin/java
    filters:
        cssrewrite: ~
        #closure:
        #    jar: "%kernel.root_dir%/Resources/java/compiler.jar"
        #yui_css:
        #    jar: "%kernel.root_dir%/Resources/java/yuicompressor-2.4.7.jar"


                    
# Doctrine Configuration
doctrine:
    dbal:
        driver:   "%database_driver%"
        host:     "%database_host%"
        port:     "%database_port%"
        dbname:   "%database_name%"
        user:     "%database_user%"
        password: "%database_password%"
        charset:  UTF8
        types:
           json: Sonata\Doctrine\Types\JsonType
        # if using pdo_sqlite as your database driver, add the path in parameters.yml
        # e.g. database_path: "%kernel.root_dir%/data/data.db3"
        # path:     "%database_path%"

    orm:
        auto_generate_proxy_classes: "%kernel.debug%"
        auto_mapping: true
      
# Swiftmailer Configuration
swiftmailer:
    transport: "%mailer_transport%"
    host:      "%mailer_host%"
    username:  "%mailer_user%"
    password:  "%mailer_password%"
    spool:     { type: memory }

sonata_block:
    default_contexts: [cms]
    blocks:
        sonata.user.block.menu:     
        sonata.user.block.account:  

        # Enable the SonataAdminBundle block
        sonata.admin.block.admin_list:
            contexts:   [admin]
        sonata.block.service.text:
        sonata.block.service.rss:    
 #sonatauser
sonata_user:
   security_acl: true
   manager_type: orm

#fosuserbundle
fos_user:
    db_driver:      orm 
    firewall_name:  main
    user_class:     Application\Sonata\UserBundle\Entity\User


    group:
        group_class:   Application\Sonata\UserBundle\Entity\Group
        group_manager: sonata.user.orm.group_manager                    # If you're using doctrine orm (use sonata.user.mongodb.user_manager for mongodb)

    service:
        user_manager: sonata.user.orm.user_manager  

sonata_notification:
    backend: sonata.notification.backend.runtime
    
sonata_cache:
    caches:
        esi:
            token: an unique security key 
            servers:
                - varnishadm -T 127.0.0.1:2000 {{ COMMAND }} "{{ EXPRESSION }}"

        ssi:
            token: an unique security key 

       
        

        symfony:
            token: s3cur3 
            php_cache_enabled: true 
            types: [mytype1, mycustomtype2] 
            servers:
                - { domain: kooqit.local, ip: 127.0.0.1, port: 80}

cmf_routing:
    chain:
        routers_by_id:
            # enable the DynamicRouter with high priority to allow overwriting configured routes with content
            #symfony_cmf_routing_extra.dynamic_router: 200
            # enable the symfony default router with a lower priority
            sonata.page.router: 150
            router.default: 100

sonata_page:
    multisite: host 
    use_streamed_response: true 
    ignore_route_patterns:
        - ^(.*)admin(.*)   
        - ^_(.*)           

    # Generates a snapshot when a page is saved (from the admin)
    #direct_publication: false
    ignore_routes:
        - sonata_page_cache_esi
        - sonata_page_cache_ssi
        - sonata_page_js_sync_cache
        - sonata_page_js_async_cache
        - sonata_cache_esi
        - sonata_cache_ssi
        - sonata_cache_js_async
        - sonata_cache_js_sync
        - sonata_cache_apc

    ignore_uri_patterns:
        - ^/admin\/   # ignore admin route, ie route containing 'admin'

    cache_invalidation:
        service:  sonata.page.cache.invalidation.simple
        recorder: sonata.page.cache.recorder
        classes:
            "Application\Sonata\PageBundle\Entity\Block": getId

    default_template: default
    templates:
        default: { path: 'SonataPageBundle::layout.html.twig', name: 'default' }

    # Assets loaded by default in template
    assets:
        stylesheets:
            # Defaults:
            - bundles/sonataadmin/vendor/bootstrap/dist/css/bootstrap.min.css
            - bundles/sonatapage/sonata-page.front.min.css
        javascripts:
            # Defaults:
            - bundles/sonataadmin/vendor/jquery/dist/jquery.min.js
            - bundles/sonataadmin/vendor/bootstrap/dist/js/bootstrap.min.js
            - bundles/sonatapage/sonata-page.front.min.js

    page_defaults:
        homepage: {decorate: false}

    caches:
        ssi:
            token: an unique key # if not set a random value will be used

        esi:
            servers:
                - varnishadm -T 127.0.0.1:2000 {{ COMMAND }} "{{ EXPRESSION }}"

    is_inline_edition_on: false # set to true to keep the old behavior. the feature will be deleted in futur versions

